Top-Level-Skripte:
[Dateien, mit der Standard Nutzer größtenteils Arbeitet]
    infer.py:
        Führt die Inferenz aus.
        Nutzt die Trainingsdaten, Torchaudio und Inputdatei.
        Gibt als Output die MIDI-Datei zurück.
    train.py:
        Trainingsskript des Modells.
        Lädt Datensätze, definiert Trainingsparameter und startet das Training.
    install_dataset.py:
        Lädt Datensätze aus dem Internet herunter und entpackt diese.
        Reproduziert die Trainingsumgebung korrekt.
    test.py:
        Test und Validierung des Modells.
        Test-Datensätze für einen Benchmark-Test.

Konfigurationsverzeichnis (config/):
[Einstellungen für Audio-Preprocessing, Modellarchitektur und Instrumenten]
    config.py:
        Globale Standardparameter.
        Legt das Standard Encoder-/Decoder-Modell fest.
    data_preset.py:
        Datensatz-Voreinstellungen.
    task.py:
        Definiert die Transkriptions-Aufgaben und Instrument-Klassen.
    vocabulary.py:
        Enthält und bestimmt die Instrumenten-Vokabulare und deren Programmnummern.

Modellverzeichnis (model/):
[Quellcode der Modellarchitektur]
    ymt3.py:
        Hauptmodell-Klasse "YourMT3".
        Verbindet den Encoder und Decoder.
        Definiert wie Eingabe-Mel-Spektrogramme in das Modell fließen.
        Definiert wie Ausgabe-Token generiert werden.
        Konstruktor läd Konfigurationen aus "config.py".
        TaskManager-Instanz wird initialisiert.
        Richtet den Decoder ein.
        Enthält Methoden für die Inferenz und das Training
    t5mod.py (T5DecoderYMT3, T5EncoderYMT3):
        Auf T5-Sprachmodell angepasste Transformer-Encoder/-Decoder.
    perceiver_mod.py:
        PerceiverTF-Encoder.
    decmod.py / t5mod_helper:
        Varianten des Decoders:
    lm_head.py:
        Language Model Head für die Token-Vorhersage
    adapter_utils.py:
        Hilfsklassen
    pitchshift_layer.py:
        Für Pitch-Shifting während des Trainings.

Hilfsfunktionen (utils/):
[Utility-Module für: Pre-/Postprocessing und Evaluierung]
    audio.py:
        Audiovorverarbeitung (z.B. Audiosignal in Segemente aufteilen).
    task_manger.py:
        Definiert die Klasse TaskManager,
        für die Verwaltung der Transkriptionsaufgaben.
    note2event.py / event2note.py:
        Konverteirung zwischen Noten und Event-Token.
        Noten-Objekte werden auf MIDI-Events/Noten abgebildet.
    midi.py:
        Helfer zum Erstellen von MIDI-Dateien aus Note-Events.
    utils.py:
        Allgemeine Hilfsfunktionen.
        Routinen zum Donwload von Datensätzen.
    metrics.py:
        Funktionen zur Berechnung von Evaluierungsmetriken.

Sonstige Ordner:
[Ordner ohne System relevante Dateien]
    content/:
        Ablage generierter Inhalte
    logs/:
        Während Training entstehende Logs.
        Gespeicherte Modellcheckpoints.
    extras/:
        zusätzliche Skripte oder experimentelle Features.


